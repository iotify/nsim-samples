{
    "name": "AWS_SmartWatch",
    "tags": {
        "description": "Smart Watch Simulation",
        "icon": "https://raw.githubusercontent.com/iotify/nsim-samples/main/Images/Smart%20Watch.png",
        "attribution": "public"
    },
    "labels": [
        "smartdevice",
        "advanced",
        "wearable"
    ],
    "version": 1,
    "locked": false,
    "definition": {
        "protocol": "mqtt",
        "clientId": "",
        "additionalPackages": {},
        "strategy": "Default",
        "settings": {
            "url": "mqtt://amazonaws.com:8883",
            "topic": "$aws/things/{{\"iotify_\" + client() + \"/shadow/update/\"}}",
            "subscriptionTopics": [
                "$aws/things/{{\"aws_iotify_\" + client()}}/#"
            ],
            "timeout": 10000,
            "qos": 0,
            "retain": false,
            "keepalive": 10000,
            "reconnectPeriod": 60000,
            "connectTimeout": 60000,
            "username": "",
            "password": "",
            "identity": "",
            "psk": "",
            "key": "{{state._$key}}",
            "cert": "{{state._$cert}}",
            "ca": "-----BEGIN CERTIFICATE-----\nMIIE0zCCA7ugAwIBAgIQGNrRniZ96LtKIVjNzGs7SjANBgkqhkiG9w0BAQUFADCB\nyjELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL\nExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJp\nU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxW\nZXJpU2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0\naG9yaXR5IC0gRzUwHhcNMDYxMTA4MDAwMDAwWhcNMzYwNzE2MjM1OTU5WjCByjEL\nMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZW\nZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJpU2ln\nbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJp\nU2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9y\naXR5IC0gRzUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1\nnmAMqudLO07cfLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKzj/i5Vbex\nt0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2IIPVQT60nKWVSFJuUrjxuf6/WhkcIz\nSdhDY2pSS9KP6HBRTdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY5fQG\nBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9r911kTMZHRxAy3QkGSGT2RT+\nrCpSx4/VBEnkjWNHiDxpg8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/\nNIeWiu5T6CUVAgMBAAGjgbIwga8wDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8E\nBAMCAQYwbQYIKwYBBQUHAQwEYTBfoV2gWzBZMFcwVRYJaW1hZ2UvZ2lmMCEwHzAH\nBgUrDgMCGgQUj+XTGoasjY5rw8+AatRIGCx7GS4wJRYjaHR0cDovL2xvZ28udmVy\naXNpZ24uY29tL3ZzbG9nby5naWYwHQYDVR0OBBYEFH/TZafC3ey78DAJ80M5+gKv\nMzEzMA0GCSqGSIb3DQEBBQUAA4IBAQCTJEowX2LP2BqYLz3q3JktvXf2pXkiOOzE\np6B4Eq1iDkVwZMXnl2YtmAl+X6/WzChl8gGqCBpH3vn5fJJaCGkgDdk+bW48DW7Y\n5gaRQBi5+MHt39tBquCWIMnNZBU4gcmU7qKEKQsTb47bDN0lAtukixlE0kF6BWlK\nWE9gyn6CagsCqiUXObXbf+eEZSqVir2G3l6BFoMtEMze/aiCKm0oHw0LxOXnGiYZ\n4fQRbxC1lfznQgUy286dUV4otp6F01vvpX1FQHKOtw5rDgb7MzVIcbidJ4vEZV8N\nhnacRHr2lVz2XTIIM6RUthg/aFzyQkqFOFSDX9HoLPKsEdao7WNq\n-----END CERTIFICATE-----"
        },
        "model": {
            "currentState": "Init",
            "stateMap": {
                "Init": {
                    "name": "Init",
                    "isEnabled": true,
                    "sender": "{\n  state._$key = glob.get(\"aws_iotify_\" + client() + \"_key\");\n  state._$cert = glob.get(\"aws_iotify_\" + client() + \"_cert\");\n\n  state.position = {\n    lat: 47.3769,\n    lon: 8.5417\n  }\n\n  state.step_count = 0\n\n  state.pubTopic =\"iotify_\" + client() + \"/shadow/update\";\n\n  state.gatewaySubTopics = [\n    \"$aws/things/\" + \"iotify_\" + client() + \"/shadow/#\",\n  ]\n\n  next(\"Walking\")\n}",
                    "receiver": "",
                    "icon": "",
                    "index": 0
                },
                "Running": {
                    "name": "Running",
                    "isEnabled": true,
                    "sender": "{\n  var now = dayjs().format()\n\n  var steps = chance.integer({ min: 0, max: 50 })\n  state.step_count = state.step_count + steps\n\n  state.position.lat = state.position.lat + steps * chance.floating({ min: -0.00003, max: 0.00003 })\n  state.position.lon = state.position.lon + steps * chance.floating({ min: -0.00003, max: 0.00003 })\n  \n  var message = {\n    client: \"iotify_\" + client(),\n    activity: \"running\",\n    timestamp: now,\n    position: state.position,\n    step_count: state.step_count,\n    body_temperature: 37 + chance.floating({ min: -0.5, max: 0.5 }),\n    heart_rate: volatile({ min: 60, max: 120, delta: 2, key: \"heartRate\", }),\n    blood_oxygen: volatile({ min: 97, max: 100, delta: 1, key: \"bloodOxygen\", }),\n  }\n\n  if (chance.bool({ likelihood: 5 })) {\n    next('Resting')\n  }\n  else {\n    if (chance.bool({ likelihood: 90 })) {\n      next('Running')\n    }\n    else {\n      next('Walking')\n    }\n  }\n\n  metric.add('Heart_Rate_'+client(), message.heart_rate)\n  metric.add('Steps_' + client(), state.step_count)\n\n  let test = {\n    \"state\": {\n      \"reported\": {\n        ...message\n      }\n    }\n  }\n\n  let topic = \"$aws/things/\" + \"iotify_\" + client() + \"/shadow/update\";\n  protocol.publish(test, topic);\n\n  return JSON.stringify(message, null, 2);\n}",
                    "receiver": "",
                    "icon": "",
                    "index": 1
                },
                "Walking": {
                    "name": "Walking",
                    "isEnabled": true,
                    "sender": "{\n  var now = dayjs().format()\n\n  var steps = chance.integer({ min: 0, max: 15 })\n  state.step_count = state.step_count + steps\n  \n  state.position.lat = state.position.lat + steps * chance.floating({ min: -0.00001, max: 0.00001 })\n  state.position.lon = state.position.lon + steps * chance.floating({ min: -0.00001, max: 0.00001 })\n\n  var message = {\n    client: \"iotify_\" + client(),\n    activity: \"walking\",\n    timestamp: now,\n    position: state.position,\n    step_count: state.step_count,\n    body_temperature: 37 + chance.floating({ min: -0.5, max: 0.5 }),\n    heart_rate: volatile({ min: 60, max: 120, delta: 2, key: \"heartRate\", }),\n    blood_oxygen: volatile({ min: 97, max: 100, delta: 1, key: \"bloodOxygen\", }),\n  }\n\n  if (chance.bool({ likelihood: 5 })) {\n    next('Resting')\n  }\n  else {\n    if (chance.bool({ likelihood: 90 })) {\n      next('Walking')\n    }\n    else {\n      next('Running')\n    }\n  }\n  \n  metric.add('Heart_Rate_' + client(), message.heart_rate)\n  metric.add('Steps_' + client(), state.step_count)\n  \n  let test = {\n    \"state\": {\n      \"reported\": {\n        ...message\n      }\n    }\n  }\n\n  let topic = \"$aws/things/\" + \"iotify_\" + client() + \"/shadow/update\";\n  protocol.publish(test, topic);\n\n  return JSON.stringify(message, null, 2);\n}",
                    "receiver": "",
                    "index": 2,
                    "icon": ""
                },
                "Resting": {
                    "name": "Resting",
                    "isEnabled": true,
                    "sender": "{\n  var now = dayjs().format()\n\n  var message = {\n    client: \"iotify_\" + client(),\n    activity: \"resting\",\n    timestamp: now,\n    position: state.position,\n    step_count: state.step_count,\n    body_temperature: 37 + chance.floating({ min: -0.5, max: 0.5 }),\n    heart_rate: volatile({ min: 60, max: 120, delta: 2, key: \"heartRate\", }),\n    blood_oxygen: volatile({ min: 97, max: 100, delta: 1, key: \"bloodOxygen\", }),\n  }\n\n  if (chance.bool({ likelihood: 40 })) {\n    next('Resting')\n  }\n  else {\n    if (chance.bool({ likelihood: 50 })) {\n      next('Walking')\n    }\n    else {\n      next('Running')\n    }\n  }\n\n  metric.add('Heart_Rate_' + client(), message.heart_rate)\n  metric.add('Steps_' + client(), state.step_count)\n\n  let test = {\n    \"state\": {\n      \"reported\": {\n        ...message\n      }\n    }\n  }\n\n  let topic = \"$aws/things/\" + \"iotify_\" + client() + \"/shadow/update\";\n  protocol.publish(test, topic);\n\n  return JSON.stringify(message, null, 2);\n}",
                    "receiver": "",
                    "index": 3,
                    "icon": ""
                },
                "Finished": {
                    "name": "Finished",
                    "isEnabled": true,
                    "sender": "\n{\n  // Please provide your logic here.\n\n  // The device model state could be transitioned by calling next()\n  // To transition to a specific state pass state name as argument e.g.\n  // next('Running');\n\n}\n",
                    "receiver": "",
                    "icon": "",
                    "index": 4
                }
            },
            "setup": "",
            "teardown": ""
        }
    }
}